#
# This is my site's nginx config. I don't mind committing it to a public repo
# because I simply don't care about, e.g., the path disclosure issues; to my
# mind, if someone is in a position to actually *use* any of the information
# in this file (like reading arbitrary files on the host) I'd be dead anyway.
#

upstream wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server 127.0.0.1:2000 fail_timeout=0;
}

server {
    charset utf-8;
    server_tokens off;
    server_name exhaust.lewiscollard.com;

    # the below block is shit i've copy-pasta'd and forgotten what it does,
    # something performance something
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    client_max_body_size 15M;
    # Make TCP send multiple buffers as individual packets.
    tcp_nodelay on;
    # Send half empty (or half full) packets.
    tcp_nopush on;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location /static/ {
        alias /var/www/exhaust_static/;
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";

        gzip on;
        gzip_vary on;
        gzip_types text/plain application/x-javascript application/javascript text/xml text/css image/svg+xml;
    }

    location /media/ {
        alias   /var/www/exhaust_media/;
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
    }

    # My htpasswd file puts a very very easy password to break on /admin/.
    # It is not to keep out anyone actively targeting my site, but rather
    # to make *drive-by* automated brute force attacks hit nginx, rather than
    # the Django app.
    location /admin/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header Authorization "";
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;

        auth_basic "pls no brute force admin";
        auth_basic_user_file /etc/nginx/htpasswd;

        if (!-f $request_filename) {
            proxy_pass http://wsgi_server;
            break;
        }
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header Authorization "";
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://wsgi_server;
            break;
        }
    }

    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/exhaust.lewiscollard.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/exhaust.lewiscollard.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    server_name www.exhaust.lewiscollard.com;
    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/exhaust.lewiscollard.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/exhaust.lewiscollard.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    return 301 https://exhaust.lewiscollard.com$request_uri;
}

server {
    server_name exhaust.lewiscollard.com www.exhaust.lewiscollard.com;
    listen 80 default_server;
    return 301 https://exhaust.lewiscollard.com$request_uri;
}
